"""
Формируется матрица F следующим образом: скопировать в нее А и  если в Е количество чисел,
больших К в четных столбцах , чем произведение чисел в нечетных строках ,
то поменять местами С и Е симметрично, иначе С и В поменять местами несимметрично.
При этом матрица А не меняется. После чего если определитель матрицы А больше суммы
диагональных элементов матрицы F, то вычисляется выражение: A*AT – K * F-1,
иначе вычисляется выражение (A-1 +G-FТ)*K, где G-нижняя треугольная матрица, полученная из А.
Выводятся по мере формирования А, F и все матричные операции последовательно.
"""
import time
import numpy as np
try:
    N = int(input("Введите количество строк (столбцов) квадратной матрицы больше 3 и меньше 184:"))
    while (N < 4) and (N > 183):
        N = int(input("Вы ввели неверное число. "
                      "\nВведите количество строк (столбцов) квадратной матрицы больше 3 и меньше 184:"))
    K = int(input("Введите число К:"))
    program = time.time()
    start = time.time()
    A = np.zeros((N, N), dtype=int)
    F = np.zeros((N, N), dtype=int)
    for i in range(N):     # Формируем матрицу А
        for j in range(N):
            A[i][j] = np.random.randint(-10, 10)
    middle = time.time()
    print("Матрица A:\n", A, "\nВремя:", middle - start)
    for i in range(N):      # Формируем матрицу F, копируя из матрицы А
        for j in range(N):
            F[i][j] = A[i][j]
    n = N // 2         # Размерность подматрицы
    start = time.time()
    E = np.zeros((n, n), dtype=int)   # Формируем матрицу Е
    for i in range(n):
        for j in range(n):
            E[i][j] = A[i][j]
    middle = time.time()
    print("Матрица Е:\n", E, "\nВремя:", middle - start)

    print(N, n)
    Summa_K = 0
    Pr = 1
    for i in range(n):
        for j in range(n):
            if j % 2 == 0 and E[i][j] > K:     #кол-во нулей в четных столбцах
                Summa_K += 1
            if i % 2 != 0:           #произведение чисел в нечетных строках
                Pr = Pr * E[i][j]
    print("Кол-во нулей в четных столбцах:", Summa_K, "\nПроизведение чисел в нечетных строках:", Pr)

    if Summa_K > Pr:
        print("Меняем C и Е симметрично")
        for i in range(n):
            for j in range(n):
                F[i][j] = A[N - i - 1][N - j - 1]
    else:
        print("Меняем C и B несимметрично")
        for i in range(N):
            for j in range(N):
                if (j >= (N / 2)) and (i <= (N / 2)):
                    F[i][j], F[i + n - 1][j] = F[i + n - 1][j], F[i][j]
    print("Матрица A:\n", A, "\nМатрица F:\n", F)
    print("Определитель матрицы А:", round(np.linalg.det(A)), "\nСумма диагональных элементов матрицы F:", np.trace(F))
    if np.linalg.det(A) == 0 or np.linalg.det(F) == 0:
            print("Нельзя вычислить т.к. матрица A или F вырождена")
    elif np.linalg.det(A) > np.trace(F):
            print("Вычисление выражения: A*A^T – K * F^-1")
            A = (A.dot(np.transpose(A))) - (K * np.linalg.inv(F))
    else:
        print("Вычисление выражения: (A^-1 +G-F^Т)*K")
        A = (np.linalg.inv(A) + np.tril(A) - np.linalg.inv(F)) * K   # (A^-1+G-F^-1)*K
    print("Результат:")
    for i in A:         # Вывод результата
        for j in i:
            print("%5d" % round(j), end=' ')
        print()
    finish = time.time()
    result = finish - program
    print("Время программы: " + str(result) + " секунды.")

except ValueError:
    print("\nЭто не число")
